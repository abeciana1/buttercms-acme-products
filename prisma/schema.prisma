// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  firstName String
  lastName  String
  email     String     @unique
  favorites Favorite[]
  cart      Cart?
}

model Favorite {
  id       Int               @id @default(autoincrement())
  userId   Int
  user     User              @relation(fields: [userId], references: [id])
  products FavoriteProduct[]
}

model FavoriteProduct {
  favoriteId Int
  favorite   Favorite @relation(fields: [favoriteId], references: [id])
  productId  Int
  product    Product  @relation(fields: [productId], references: [id])

  @@id([favoriteId, productId])
}

model Product {
  id                    Int               @id @default(autoincrement())
  sku                   String            @unique
  name                  String
  headline              String
  description           String
  additionalDescription String?
  warning               String?
  price                 Float
  shippingPrice         Float
  discount              Float
  discountPrice         Float
  categoryId            Int
  category              Category          @relation(fields: [categoryId], references: [id])
  parentProductId       Int?
  parentProduct         Product?          @relation("ProductOptions", fields: [parentProductId], references: [id])
  options               Product[]         @relation("ProductOptions")
  favoriteProducts      FavoriteProduct[]
  cartItems             CartItem[]
  mainImage             String
  seoDesc               String
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  slug     String
  products Product[]
}

model Cart {
  id            Int        @id @default(autoincrement())
  sessionId     String     @unique
  userId        Int?       @unique
  user          User?      @relation(fields: [userId], references: [id])
  cartItems     CartItem[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  subTotal      Float
  shippingTotal Float
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  cart      Cart     @relation(fields: [cartId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
